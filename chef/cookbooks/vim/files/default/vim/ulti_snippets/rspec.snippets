snippet let
let(:${1:token}) { ${2:expression} }
endsnippet

snippet let+
let!(:${1:token}) { ${2:expression} }
endsnippet

snippet .and "and_raise()"
.and_raise( ${1:exception}.new("${2:message}") )
endsnippet

snippet .and "and_return { }"
.and_return { ${1} }
endsnippet

snippet .and "and_return()"
.and_return( ${1:value} )
endsnippet

snippet .and "and_throw()"
.and_throw( ${1:sym} )
endsnippet

snippet .and "and_yield()"
.and_yield( ${1:values} )
endsnippet

snippet .at "at_least()"
.at_least( ${1:n} ).times
endsnippet

snippet .at "at_most()"
.at_most( ${1:n} ).times
endsnippet

snippet .on
.once
endsnippet

snippet .tw
.twice
endsnippet

snippet .any
.any_number_of_times
endsnippet

snippet desc
describe ${1:Type} do
  ${4}
end
endsnippet

snippet fac "call"
Factory(:${1:factory_name}, ${2:args})
endsnippet

snippet its-
it "should ${1:condition}"
endsnippet

snippet its
it "should ${1:do something}" do
  ${2}
end
endsnippet

snippet .ex
.exactly( ${1:n} ).times
endsnippet

snippet .w
.with( ${1:args} )${2}
endsnippet

snippet con
context "${1:context}" do
  ${2}
end
endsnippet

snippet dou
${1:var} = double( "${2:double_name}" )${3:.as_null_object}
endsnippet

snippet st
stub!( :${1:expectation} ).with( ${2:args} ).and_return( ${3} )
endsnippet

snippet bef
before(:each) do
  ${1}
end
endsnippet

snippet bef-
before(:each) \{ ${1} \}
endsnippet

snippet bef+
before(:all) do
  ${1}
end
endsnippet

snippet aft "After each test"
after(:each) do
  ${1}
end
endsnippet

snippet aft "After all tests"
after(:all) do
  ${1}
end
endsnippet

snippet aro "Around"
around(:each) do |example|
  ${1}
  example.run
end
endsnippet

snippet sh=
${1:target}.should == ${2:value}
endsnippet

snippet sh=-
${1:target}.should_not == ${2:value}
endsnippet

snippet shm "Should contain"
${1:target}.should =~ /${2:regexp}/
endsnippet

snippet shm-
${1:target}.should_not =~ /${2:regexp}/
endsnippet

snippet shb
${1:target}.should be( ${2:result} )
endsnippet

snippet shnb
${1:target}.should_not be( ${2:result} )
endsnippet

snippet shbko
${1:target}.should be_a_kind_of( ${2:klass} )
endsnippet

snippet shbko-
${1:target}.should_not be_a_kind_of( ${2:klass} )
endsnippet

snippet shbio
${1:target}.should be_instance_of( ${2:klass} )
endsnippet

snippet shbio-
${1:target}.should_not be_instance_of( ${2:klass} )
endsnippet

snippet shh
${1:target}.should have( ${2:num} ).${3:things}
endsnippet

snippet shhal
${1:target}.should have_at_least(${2:num}).${3:things}
endsnippet

snippet shham
${1:target}.should have_at_most(${2:num}).${3:things}
endsnippet

snippet shbp
${1:target}.should ${2:be_${3:predicate}} ${4}
endsnippet

snippet shnbp
${1:target}.should_not ${2:be_${3:predicate}} ${4}
endsnippet

snippet exp "Exception"
expect {
  ${1}
.to raise_exception( ${2:ErrorClass}, /${3:message match}/i )
${4}
endsnippet

snippet exp- "Not Exception"
expect {
  ${1}
}.to_not raise_exception( ${2:ErrorClass} )
${3}
endsnippet

snippet exp- "Not Change"
expect {
  ${1}
}.to_not change { ${2:var} }
${3}
endsnippet

snippet shre
lambda { ${1} }.should raise_exception( ${2:ErrorClass}, /${3:message match}/i )
${4}
endsnippet

snippet shre-
lambda { ${1} }.should_not raise_exception( ${2:ErrorClass} )
${3}
endsnippet

snippet shr
${1:mock}.should_receive( :${2:message} )${3}
endsnippet

snippet shr-
${1:mock}.should_not_receive( :${2:message} )${3}
endsnippet

snippet shrt
${1:target}.should respond_to( :${2:sym} )
endsnippet

snippet shrt-
${1:target}.should_not respond_to( :${2:sym} )
endsnippet

snippet shbl
it_should_behave_like "${1:shared behavior}"
${2}
endsnippet

snippet shbw
.should be_within(${1:delta}).of(${2:expected})
endsnippet

snippet shbw-
.should_not be_within(${1:delta}).of(${2:expected})
endsnippet

snippet sim
def ${1:matcher_method}( expected )
  simple_matcher do |given, matcher|
    matcher.description = "${2:verb} with #{expected.inspect}"
    matcher.failure_message = "expected #{given.inspect} to $2 with #{expected.inspect}"
    matcher.negative_failure_message = "expected #{given.inspect} not to $2 with #{expected.inspect}"
    given.${3:...checks something and returns a boolean}
  end
end
# Boilerplate for spec
endsnippet

snippet req
require 'spec_helper'

describe ${1:`substitute(substitute(Filename(), '^.', '\u&', ''), '_spec', '', '')`} do
  ${2}
end
endsnippet

snippet fac "define"
Factory.define :${1:factory_name} do |u|
  ${2}
end
endsnippet

snippet match
Spec::Matchers.define :${1:match_name} do |*expected_array|
  expected = expected_array[0]
  match do |actual|
    ${2}
  end
end
endsnippet

snippet routei "Success"
it 'should get all ${1:controller}' do
  route_for(:controller => '${1}', :action => 'index').should == '${1}'
  params_from(:get, '/${1}').should == {:controller => '${1}', :action => 'index'}
end
endsnippet

snippet routei "Fail"
it 'should not be able to get all ${1:controller}' do
  params_from(:get, '/${1}').should route_to_404
end
endsnippet

snippet routes "Success"
it 'should show a/an ${1:controller}' do
  route_for(:controller => '${1}', :action => 'show', :id => '1').should == '${1}/1'
  params_from(:get, '/${1}/1').should == {:controller => '${1}', :action => 'show', :id => '1'}
end
endsnippet

snippet routes "Fail"
it 'should not be able to show a/an ${1:controller}' do
  params_from(:get, '/${1}/1').should route_to_404
end
endsnippet

snippet mock
def mock_${1:model}(stubs=Hash.new)
  stubs[:${2:boolean}] = true if stubs[:${2}].nil?
  ${3:stuff}
  @mock_${1} ||= mock_model(${1}, stubs)
end
endsnippet

